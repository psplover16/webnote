import{_}from"./plugin-vueexport-helper-x3n3nnut.js";import{r as v,o as e,c as i,a,b as s,t as n,n as u,d as r,e as f,g as c}from"./index-tug10zDy.js";const m={key:0,type:"I"},h=f('<li data-v-47d53cd7>父層flex容器 <ul data-v-47d53cd7><li data-v-47d53cd7>display:flex</li><li data-v-47d53cd7> flex-flow，flex-direction 與 flex-wrap 的縮寫，所以只要在這前後帶上相對應的值即可。 <ul data-v-47d53cd7><li data-v-47d53cd7>flex-direction <ul data-v-47d53cd7><li data-v-47d53cd7>column</li><li data-v-47d53cd7>row</li></ul></li><li data-v-47d53cd7>flex-wrap（控制子元素是否换行） <ul data-v-47d53cd7><li data-v-47d53cd7>wrap</li><li data-v-47d53cd7>nowrap</li></ul></li></ul></li><li data-v-47d53cd7><ul data-v-47d53cd7><li data-v-47d53cd7>justify-content（主軸上的對齊方式） <ul data-v-47d53cd7><li data-v-47d53cd7>flex-start</li><li data-v-47d53cd7>flex-end</li><li data-v-47d53cd7>center</li><li data-v-47d53cd7>space-between</li><li data-v-47d53cd7>space-around</li></ul></li><li data-v-47d53cd7>align-items（單行，交叉軸上的對齊方式） <ul data-v-47d53cd7><li data-v-47d53cd7>flex-start：項目在交叉軸的起始位置對齊。</li><li data-v-47d53cd7>flex-end：項目在交叉軸的結束位置對齊。</li><li data-v-47d53cd7>center：項目在交叉軸的中間位置對齊。</li><li data-v-47d53cd7>baseline：專案的第一行文字的基線對齊。</li><li data-v-47d53cd7>stretch：項目被拉伸以適應容器。</li></ul></li><li data-v-47d53cd7>align-content（多行，交叉軸上的對齊方式）</li></ul></li></ul></li><li data-v-47d53cd7>放在子層元素 <ul data-v-47d53cd7><li data-v-47d53cd7>flex，縮寫，內含三元素，如果只設定一個則是 flex-grow <ul data-v-47d53cd7><li data-v-47d53cd7>flex-grow: 元件的<span class="r" data-v-47d53cd7>伸展性</span>，是一個數值，當空間分配<span class="r" data-v-47d53cd7>還有剩餘時</span>的當前元件的伸展性，預設值為 0，如果設置為 0 則不會縮放。</li><li data-v-47d53cd7>flex-shrink: 元件的<span class="r" data-v-47d53cd7>收縮性</span>: 是一個數值，當<span class="r" data-v-47d53cd7>空間分配不足</span>時的當前元件的收縮性，預設值為 1，如果設置為 0 則不會縮放。</li><li data-v-47d53cd7>flex-basis: 元件的<span class="r" data-v-47d53cd7>基準值</span>，可使用不同的單位值。它指定了一個項目在彈性容器中的長度，即在不考慮伸縮的情況下，<span class="r" data-v-47d53cd7>項目的初始寬度</span></li></ul></li><li data-v-47d53cd7>order，可以重新定義元件的排列順序，順序會依據數值的大小排列。</li><li data-v-47d53cd7>align-self，用於控制單一 flex 項目在交叉軸上的對齊方式，覆蓋了父容器的 align-items 屬性，而不影響其他項目的佈局 <ul data-v-47d53cd7><li data-v-47d53cd7>auto，繼承父層</li><li data-v-47d53cd7>flex-start：項目在交叉軸的起始位置對齊。</li><li data-v-47d53cd7>flex-end：項目在交叉軸的結束位置對齊。</li><li data-v-47d53cd7>center：項目在交叉軸的中間位置對齊。</li><li data-v-47d53cd7>baseline：專案的第一行文字的基線對齊。</li><li data-v-47d53cd7>stretch：項目被拉伸以適應容器。</li></ul></li></ul></li>',2),g=[h],w={__name:"ch1",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",m,g)):r("",!0),r("",!0)]))}},x=_(w,[["__scopeId","data-v-47d53cd7"]]),b={key:0,type:"I"},$=f(`<li data-v-e4f47454> fr，grid專屬單位，剩餘空間占有幾份 </li><li data-v-e4f47454> 父層 <ul data-v-e4f47454><li data-v-e4f47454>display:grid</li><li data-v-e4f47454>grid-template-columns，橫的有幾格，每格大小為多少 <ul data-v-e4f47454><li data-v-e4f47454> grid-template-columns:1fr 2fr 2fr 1fr </li><li data-v-e4f47454> grid-template-columns: repeat(3, 1fr); <br data-v-e4f47454> 表示 1fr 1fr 1fr </li></ul></li><li data-v-e4f47454>grid-template-rows，直的有幾格，每格大小為多少 <ul data-v-e4f47454><li data-v-e4f47454> grid-template-rows:2fr 1fr 2fr 1fr </li></ul></li><li data-v-e4f47454>gap，格子之間的間距</li><li data-v-e4f47454>grid-template-areas，把子項設計好的grid-area名稱，塞入格子中，格子不需要物件，用,表示 <ul data-v-e4f47454><li data-v-e4f47454>格子還是只能用長方形或正方形</li><li data-v-e4f47454><pre data-v-e4f47454>grid-template-areas:
  &quot;reds reds greens greens&quot;
  &quot;reds reds greens greens&quot;
  &quot;reds reds . .&quot;
  &quot;yellows blues blues blues&quot;;
                </pre></li></ul></li></ul></li><li data-v-e4f47454> 子層 <ul data-v-e4f47454><li data-v-e4f47454>grid-column，設定要從垂直格線第幾格至第幾格 <pre data-v-e4f47454>grid-column: 1/3; // 表示設定位置為垂直線1~3之間
            </pre></li><li data-v-e4f47454>grid-row，設定要從水平格線第幾格至第幾格 <pre data-v-e4f47454>grid-row: 2/4; // 表示設定位置為水平線2~4之間
            </pre></li><li data-v-e4f47454>grid-area，搭配父層的grid-template-areas 一起使用，替元件設定名稱，可以在父格排版</li></ul></li><li data-v-e4f47454><div class="container1" data-v-e4f47454><div class="item red" data-v-e4f47454>1</div><div class="item green" data-v-e4f47454>2</div><div class="item blue" data-v-e4f47454>3</div><div class="item yellow" data-v-e4f47454>4</div></div></li>`,4),S=[$],k={__name:"ch2",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",b,S)):r("",!0)]))}},y=_(k,[["__scopeId","data-v-e4f47454"]]),I={key:0,type:"I"},C=f(`<li> 響應式設計 <ul><li> @media (max-width: value) 當視窗寬度不超過某個指定值時套用樣式，瀏覽器視窗的寬度小於等於指定的值時，這些樣式將會套用 </li><li> @media (min-width: value) 瀏覽器視窗的寬度大於等於指定的值時，這些樣式將會被套用 </li></ul></li><li> 媒體查詢 <br> @media mediatype and (media feature) { /* CSS 样式规则 */ } <br><ul><li> mediatype：媒體類型，例如 all（所有設備）、screen（屏幕）、print（打印機）等。 </li><li> media feature：媒體特性，例如 width（視口寬度）、height（視口高度）、orientation（設備方向）等。 <ul> 常見媒體特性 <ul><li>width：視口寬度。</li><li>height：視口高度。</li><li>min-width：最小視口寬度。</li><li>max-width：最大視口寬度。</li><li> orientation：設備方向，可以是 landscape（橫向）或 portrait（縱向）。 </li><li>aspect-ratio：視口的寬高比。</li><li>resolution：螢幕解析度。</li></ul></ul></li></ul></li><li> rem <pre>html {
  font-size: 16px; /* 設置初始文字大小 */
}
/* 其他元素使用rem設置大小 */
body {
  font-size: 1rem; /* 即 16px */
}
        </pre></li><li>rwd常見尺寸，480/414/375/360/320</li>`,4),q=`#app {
  /* 屏幕上方的安全區域邊距 */
  /* constant 為舊版IOS的函數，會返回固定的值 */
  /* env 為推薦的使用函數，能返回當前設備的安全距離 */
  padding-top: constant(safe-area-inset-top);
  padding-top: env(safe-area-inset-top);
  padding-right: constant(safe-area-inset-right);
  padding-right: env(safe-area-inset-right);
  padding-bottom: constant(safe-area-inset-bottom);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: constant(safe-area-inset-left);
  padding-left: env(safe-area-inset-left);
}`,N={__name:"ch3",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",I,[C,a("li",null,[s(" IOS手機瀏海避免遮住的方式 "),a("div",null,n(q))])])):r("",!0)]))}},V={key:0,type:"I"},z=f("<li>word-break，控制長單詞是否換行 <ul><li>normal，使用瀏覽器默認的斷行規則</li><li>break-all，強制單辭斷行</li><li>keep-all，禁止斷行</li></ul></li><li>overflow-wrap，用於控制文本是否斷行，斷行規則與word-break同</li><li>white-space，控制元素內空白字符的處理方式 <ul><li>normal，預設值。連續的空白符會被合併，換行符會被視為空白符，文字會根據需要自動換行。</li><li>nowrap，不允許文字換行，所有的空白符都被視為普通字元。</li><li>pre，保留所有的空白符，但不允許文字換行。</li><li>pre-wrap，保留所有的空白符，但允許文字根據需要換行。</li><li>pre-line，連續的空白符號會被合併，但允許文字根據需要換行。</li></ul></li><li> white-space:pre-wrap; + word-break:break-all; // 強制斷行 </li>",4),B=[z],D={__name:"ch4",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",V,B)):r("",!0)]))}},O={key:0,type:"I"},j=a("pre",null,`.aa{
    border: 20px solid;
    display: inline-block;
    border-color: red transparent transparent red;
}
      `,-1),E=[j],F={__name:"ch5",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",O,E)):r("",!0)]))}},G={key:0,type:"I"},P=a("li",null,"static (靜態定位)，默認定位方式，不受定位(top、bottom、left、right影響)，按照正常文檔排列",-1),R=a("li",null,"relative (相對定位)，相對於其正常位置進行定位。相對定位的元素仍會占據原始位置，周圍的元素也不會受到其影響。",-1),T=a("li",null,"fixed (固定定位)，固定定位的元素相對於視窗進行定位，即使頁面滾動，它們也會保持在相同的位置。不會在文檔流中佔據空間",-1),W=a("li",null,"absolute (絕對定位)，相對於其最近的非靜態定位祖先元素進行定位。如果沒有非靜態定位的祖先元素，則相對於文檔的初始包含塊進行定位。",-1),A=a("li",null,"sticky (黏貼定位)，黏貼定位的元素在滾動容器的可視範圍內按照正常文檔流進行定位，一旦超出可視範圍，它們就會固定在指定位置。",-1),H=[P,R,T,W,A],J={__name:"ch6",props:{title:String},setup(d){const l=v(!1);return(o,t)=>(e(),i("div",null,[a("h2",{onClick:t[0]||(t[0]=p=>l.value=!l.value)},[s(n(d.title)+" ",1),a("div",{class:u(["isShow",l.value?"":"rotate180"])},"^",2)]),l.value?(e(),i("ol",G,H)):r("",!0)]))}},M={__name:"RWD",setup(d){return(l,o)=>(e(),i("div",null,[c(x,{title:"Flexbox(布局方式1)"}),c(y,{title:"Grid(布局方式2)"}),c(N,{title:"響應式設計/媒體查詢/rem"}),c(D,{title:"文本自動換行"}),c(F,{title:"畫三角形"}),c(J,{title:"position"})]))}};export{M as default};
